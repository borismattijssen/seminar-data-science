1 + 2
license()
demo()
image()
image
image.default()
image.default
table(train)
train
train <- merge(train_labels, train_values)
table(train)
# Define train_values_url
train_values_url <- "http://s3.amazonaws.com/drivendata/data/7/public/4910797b-ee55-40a7-8668-10efd5c1b960.csv"
# Import train_values
train_values <- read.csv(train_values_url)
# Define train_labels_url
train_labels_url <- "http://s3.amazonaws.com/drivendata/data/7/public/0bf8bc6e-30d0-4c50-956a-603fc693d966.csv"
# Import train_labels
train_labels <- read.csv(train_labels_url)
# Define test_values_url
test_values_url <- "http://s3.amazonaws.com/drivendata/data/7/public/702ddfc5-68cd-4d1d-a0de-f5f566f76d91.csv"
# Import test_values
test_values <- read.csv(test_values_url)
train <- merge(train_labels, train_values)
table(train)
View(train)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d <- read.csv("data.csv")
str(d)
s <- data.matrix(d.score)
s <- data.matrix(d$score)
mat <- matrix(s, nrow = 612, ncol=1000)
View(mat)
mat2 <- matrix(s, nrow = 1000, ncol=612)
mat[0]
mat[1,]
s[col(s) <= 1000]
s[row(s) <= 1000]
mat2[1,]
mat2[1,col(mat2) <= 10]
mat2[1,1:10]
mat[1,1:10]
s[1:10]
mat[1:10,1]
mat[1:1000,1]
mat2[1:1000,1]
mat <- matrix(s, nrow = 1000, ncol=612)
mat2[1:1000,1:10]
mat2[1:10,1]
clear
rm(list = ls())
d <- read.csv("data.csv")
s <- data.matrix(d$score)
mat <- matrix(s, nrow = 1000, ncol=612)
mean(mat)
mean(mat,1)
rowMeans(mat)
colMeans(mat)
m <- colMeans(mat)
sor(m, decreasing=TRUE)
sort(m, decreasing=TRUE)
m <- colMeans(mat)
sort(m, decreasing=TRUE,index.return=TRUE)
m[1:3]
m <- colMeans(mat)
ix <- sort(m, decreasing=TRUE,index.return=TRUE)
ix[1:3]
View(ix)
m <- colMeans(mat)
s <- sort(m, decreasing=TRUE,index.return=TRUE)
s$ix[1:3]
hist(mat[:,396])
hist(mat[,396])
hist(mat[,386])
hist(mat[,397])
shapiro.test(mat[,396])
shapiro.test(mat[,])
shapiro.test(mat)
x <- shapiro.test(mat[,396])
x$p.value
e <- array(1,1:10)
e
e <- array(1,100)
e <- array(0,100)
p <- array(0,612)
for (system in 1:612){
x <- shapiro.test(mat[,system])
p[system] <- x$p.value
}
sort(p)
s$ix[1:3]
s
d.topic
d$topic
d$metric
d$model
d$lug
d$token
levels(d$model)
system <- array(0,612)
models <- levels(d$model)
lugs <- levels(d$lug)
tokens <- levels(d$token)
i <- 1
for(model in models){
for(lug in lugs) {
for(token in tokens) {
system[i] = mean(d$score[d$model == model & d$lug == lug & d$token == token])
i <- i + 1
}
}
}
system[i] = mean(d$score[d$model == model & d$lug == lug & d$token == token])
i <- i + 1
for(token in tokens) {
system[i] = mean(d$score[d$model == model & d$lug == lug & d$token == token])
i <- i + 1
}
}
i <- 1
for(model in models){
for(lug in lugs) {
for(token in tokens) {
system[i] = mean(d$score[d$model == model & d$lug == lug & d$token == token])
i <- i + 1
}
}
}
s <- sort(system, decreasing=TRUE,index.return=TRUE)
s$ix[1:3]
systext <- array(0,612)
for(model in models){
for(lug in lugs) {
for(token in tokens) {
system[i] = mean(d$score[d$model == model & d$lug == lug & d$token == token])
systext[i] = paste(model, ", ", lug, ", ", token)
i <- i + 1
}
}
}
system <- array(0,612)
models <- levels(d$model)
lugs <- levels(d$lug)
tokens <- levels(d$token)
i <- 1
systext <- array(0,612)
for(model in models){
for(lug in lugs) {
for(token in tokens) {
system[i] = mean(d$score[d$model == model & d$lug == lug & d$token == token])
systext[i] = paste(model, ", ", lug, ", ", token)
i <- i + 1
}
}
}
s <- sort(system, decreasing=TRUE,index.return=TRUE)
s$ix[1:3]
systext[246]
systext[222]
systext[240]
s$x[1:3]
d$score[d$model == models & d$lug == lugs & d$token == tokens]
d$score[d$model == models]
library(data.table)
install.packages("data.table")
library(data.table)
setDT(d, key='model')[models]
test <- setDT(d, key='model')[models]
test <- setDT(d, key='dataset')[levels(d$dataset)]
mean(d$score[d$dataset == 'trec07'])
mean(d$score[d$dataset == 'trec08'])
mean(d$score[d$dataset == 'trec09'])
mean(d$score[d$dataset == 'trec10'])
boxplot(d$score[d$dataset == 'trec07'], d$score[d$dataset == 'trec08'], d$score[d$dataset == 'trec09'], d$score[d$dataset == 'trec10'], names=c("trec07","trec08","trec09","trec10"))
# dataset boxplots
boxplot(score~dataset,data=d, main="Score per dataset",
xlab="Dataset", ylab="Score")
boxplot(score~topic,data=d, main="Score per topic", xlab="Dataset", ylab="Topic")
boxplot(score~metric,data=d, main="Score per metric", xlab="Dataset", ylab="Metric")
# dataset boxplots
boxplot(score~dataset,data=d[d$metric == 'ap'], main="Score per dataset", xlab="Dataset", ylab="Score")
# dataset boxplots
boxplot(score~dataset,data=d[d$metric == 'err'], main="Score per dataset", xlab="Dataset", ylab="Score")
# dataset boxplots
boxplot(score~dataset,data=d[d$metric == 'ndcg'], main="Score per dataset", xlab="Dataset", ylab="Score")
metrics
levels(d$metric)
# dataset boxplots
boxplot(score~dataset,data=d[d$metric == 'p10'], main="Score per dataset", xlab="Dataset", ylab="Score")
# dataset boxplots
boxplot(score~dataset,data=d[d$metric == 'rbp'], main="Score per dataset", xlab="Dataset", ylab="Score")
# dataset boxplots
boxplot(score~dataset,data=d[d$metric == 'err'], main="Score per dataset", xlab="Dataset", ylab="Score")
# dataset boxplots
boxplot(score~dataset,data=d, main="Score per dataset", xlab="Dataset", ylab="Score")
boxplot(score~topic,data=d, main="Score per topic", xlab="Dataset", ylab="Topic")
boxplot(score~dataset,data=d[d$metric == 'err'], main="Score per dataset", xlab="Dataset", ylab="Score")
boxplot(score~dataset,data=d[d$metric == 'err'], main="Score per dataset for metric == 'err'", xlab="Dataset", ylab="Score")
boxplot(score~model,data=d, main="Score per model", xlab="Dataset", ylab="Model")
boxplot(score~model,data=d, main="Score per model", xlab="Model", ylab="Score")
boxplot(score~metric,data=d, main="Score per metric", xlab="Metric", ylab="Score")
# model analysis
model0 <- lm(score ~ 1, data = d, na.action = na.exclude)
model1 <- lm(score ~ lug, data = d, na.action = na.exclude)
anova(model0, model1)
summary(model1)
model2 <- lm(score ~ lug + token, data = d, na.action = na.exclude)
anova(model0, model2)
anova(model0, model1, model2)
model1 <- lm(score ~ lug, data = d, na.action = na.exclude)
model2 <- lm(score ~ token, data = d, na.action = na.exclude)
model2 <- lm(score ~ model, data = d, na.action = na.exclude)
model2 <- lm(score ~ token, data = d, na.action = na.exclude)
model3 <- lm(score ~ model, data = d, na.action = na.exclude)
anova(model0, model1)
anova(model0, model2)
anova(model0, model3)
summary(model1)
summary(model2)
summary(model3)
boxplot(score~metric,data=d, main="Score per metric", xlab="Metric", ylab="Score")
