1 + 2
license()
demo()
image()
image
image.default()
image.default
table(train)
train
train <- merge(train_labels, train_values)
table(train)
# Define train_values_url
train_values_url <- "http://s3.amazonaws.com/drivendata/data/7/public/4910797b-ee55-40a7-8668-10efd5c1b960.csv"
# Import train_values
train_values <- read.csv(train_values_url)
# Define train_labels_url
train_labels_url <- "http://s3.amazonaws.com/drivendata/data/7/public/0bf8bc6e-30d0-4c50-956a-603fc693d966.csv"
# Import train_labels
train_labels <- read.csv(train_labels_url)
# Define test_values_url
test_values_url <- "http://s3.amazonaws.com/drivendata/data/7/public/702ddfc5-68cd-4d1d-a0de-f5f566f76d91.csv"
# Import test_values
test_values <- read.csv(test_values_url)
train <- merge(train_labels, train_values)
table(train)
View(train)
a
a=5
a
4*5
demo()
cd dev
clearTweets <- function(tweets, excl) {
tweets.text <- sapply(tweets, function(t)t$getText()) #get text out of tweets
tweets.text = gsub('[[:cntrl:]]', '', tweets.text)
tweets.text = gsub('\\d+', '', tweets.text)
tweets.text <- str_replace_all(tweets.text,"[^[:graph:]]", " ") #remove graphic
corpus <- Corpus(VectorSource(tweets.text))
corpus_clean <- tm_map(corpus, removePunctuation)
corpus_clean <- tm_map(corpus_clean, content_transformer(tolower))
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords("english"))
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
corpus_clean <- tm_map(corpus_clean, removeWords, c(excl,"http","https","httpst"))
return(corpus_clean)
}
install.packages("twitteR", dependencies = TRUE)
install.packages("RCurl", dependencies = T)
install.packages("bitops", dependencies = T)
install.packages("plyr", dependencies = T)
library(plyr)
library(twitteR)
library(RCurl)
library(bitops)
install.packages('stringr', dependencies = T)
library(stringr)
install.packages("NLP", dependencies = T)
library(NLP)
install.packages("tm", dependencies = T)
library(tm)
install.packages("wordcloud", dependencies=T)
install.packages("RColorBrewer", dependencies=TRUE)
library(RColorBrewer)
library(wordcloud)
install.packages("reshape", dependencies=T)
library(reshape)
tweets_T <- searchTwitter("#JustinBieber", n=1000, lang="en", resultType="recent") #1000 recent tweets about Donald Trump, in English (I think that 1500 tweets is max)
tweets_C <- searchTwitter("#BenedictCumberbatch", n=1000, lang="en", resultType="recent") #1000 recent tweets about Hillary Clinton
tweets_B <- searchTwitter("#obama", n=1000, lang="en", resultType="recent") #1000 recent tweets about Bernie Sanders
tweets_T <- searchTwitter("#JustinBieber", n=1000, lang="en", resultType="recent") #1000 recent tweets about Donald Trump, in English (I think that 1500 tweets is max)
tweets_T <- searchTwitter("#JustinBieber", n=1000, lang="en", resultType="recent") #1000 recent tweets about Donald Trump, in English (I think that 1500 tweets is max)
source("your_twitter.R") #this file will set my personal variables for my twitter app, adjust the name of this file. use the provide template your_twitter.R
setup_twitter_oauth(consumer_key,consumer_scret, access_token,access_scret) #connect to  twitter app
setwd("~/dev/github/borismattijssen/seminar-data-science/assignment-a")
source("your_twitter.R") #this file will set my personal variables for my twitter app, adjust the name of this file. use the provide template your_twitter.R
setup_twitter_oauth(consumer_key,consumer_scret, access_token,access_scret) #connect to  twitter app
setup_twitter_oauth(consumer_key,consumer_scret, access_token,access_scret) #connect to  twitter app
source("your_twitter.R") #this file will set my personal variables for my twitter app, adjust the name of this file. use the provide template your_twitter.R
source("your_twitter.R") #this file will set my personal variables for my twitter app, adjust the name of this file. use the provide template your_twitter.R
setup_twitter_oauth(consumer_key,consumer_scret, access_token,access_scret) #connect to  twitter app
tweets_T <- searchTwitter("#JustinBieber", n=1000, lang="en", resultType="recent") #1000 recent tweets about Donald Trump, in English (I think that 1500 tweets is max)
tweets_C <- searchTwitter("#BenedictCumberbatch", n=1000, lang="en", resultType="recent") #1000 recent tweets about Hillary Clinton
tweets_B <- searchTwitter("#obama", n=1000, lang="en", resultType="recent") #1000 recent tweets about Bernie Sanders
tweets_T.text <- laply(tweets_T, function(t)t$getText()) #get text out of tweets
tweets_C.text <- laply(tweets_C, function(t)t$getText()) #get text out of tweets
tweets_B.text <- laply(tweets_B, function(t)t$getText()) #get text out of tweets
#taken from https://github.com/mjhea0/twitter-sentiment-analysis
pos <- scan('positive-words.txt', what = 'character', comment.char=';') #read the positive words
neg <- scan('negative-words.txt', what = 'character', comment.char=';') #read the negative words
source("sentiment3.R") #load algoritm
analysis_T <- score.sentiment(tweets_T.text, pos, neg)
analysis_C <- score.sentiment(tweets_C.text, pos, neg)
analysis_B <- score.sentiment(tweets_B.text, pos, neg)
sem<-data.frame(analysis_T$score, analysis_C$score, analysis_B$score)
semFrame <-melt(sem, measured=c(analysis_T.score,analysis_C.score, analysis_B.score ))
names(semFrame) <- c("Candidate", "score")
semFrame$Candidate <-factor(semFrame$Candidate, labels=c("Donald Trump", "Hillary Clinton", "Bernie Sanders")) # change the labels for your celibrities
semFrame$Candidate <-factor(semFrame$Candidate, labels=c("Justin Bieber", "Benedict Cumberbatch", "Barack Obama")) # change the labels for your celibrities
################## Below insert your own code to answer question 1. The data you need can be found in semFrame
semFrame$Candidate
################## Below insert your own code to answer question 1. The data you need can be found in semFrame
semFrame$score
semFrame
semFrame$Candidate
semFrame[semFrame$Candidate == 'Barack Obama']
semFrame$score[semFrame$Candidate == 'Barack Obama']
help mean()
mean(semFrames)
mean(semFrame)
mean(semFrame$score[semFrame$Candidate == 'Barack Obama'])
leveneTest(semFrame$score, semFrame$Candidate, center = median)
library(car)
install.packages("car", dependencies = T)
setwd("~/dev/github/borismattijssen/seminar-data-science/assignment-a")
WebVisit <- read.csv(file="./webvisit0.csv", header=TRUE, sep=",")
View(WebVisit)
hist(WebVisit$pages)
shapiro.test(WebVisit$pages)
#model4 <- lm(qakeyboa ~ keypad + sms + keypad:sms , data = Lec7g, na.action = na.exclude)
WebVisit$version + WebVisit$portal
WebVisit$version:WebVisit$portal
#model4 <- lm(qakeyboa ~ keypad + sms + keypad:sms , data = Lec7g, na.action = na.exclude)
model <- lm(pages ~ version + portal version:portal, data = WebVisit, na.action = na.exclude)
model <- lm(pages ~ version + portal version:portal, data = WebVisit, na.action = na.exclude)
model <- lm(pages ~ version + portal version:portal , data = WebVisit, na.action = na.exclude)
model <- lm(pages ~ version + portal version:portal , data = WebVisit, na.action = na.exclude)
model <- lm(pages ~ version + portal + version:portal , data = WebVisit, na.action = na.exclude)
anova(model)
summary(model)
anova(model)
#
# Data file used in the script
#   exam marks2004-2007_equal_year_sample.sav
#   examples_Chi.sav
#   feedback experiment.sav
#   mobile phone (interacting with computers).sav
#   MobilePhone and Skin Design Survey.sav
#   mp3playersurvey.sav
#
################################
library(foreign)
library(car) #Package includes Levene's test
library(tidyr)  # for wide to long format transformation of the data
library(ggplot2)
library(QuantPsyc) #include lm.beta()
library(gmodels)
install.packages("QuantPsyc", dependencies = T)
library(QuantPsyc) #include lm.beta()
library(gmodels)
install.packages("gmodels", dependencies = T)
Lec7g <- read.spss("mobile phone (interacting with computers).sav", use.value.labels=TRUE, to.data.frame=TRUE)
# setting path to working director, where R can find data, or files
#note apple use / , whereas windows use  \
setwd("~/dev/github/borismattijssen/seminar-data-science/assignment-a/ex2.2")
sink("output-lecture.txt")  # divert R output to file
Lec7g <- read.spss("mobile phone (interacting with computers).sav", use.value.labels=TRUE, to.data.frame=TRUE)
leveneTest(Lec7g$qakeyboa, interaction(Lec7g$keypad , Lec7g$sms)) #to test homogeneity accross all 4 conditions
bar <- ggplot(Lec7g, aes(sms , qakeyboa, fill = keypad))
bar + stat_summary(fun.y = mean, geom = "bar", position="dodge")
model0 <- lm(qakeyboa ~ 1 , data = Lec7g, na.action = na.exclude)
model1 <- lm(qakeyboa ~ keypad  , data = Lec7g, na.action = na.exclude)
model2 <- lm(qakeyboa ~ sms , data = Lec7g, na.action = na.exclude)
model3 <- lm(qakeyboa ~ keypad + sms , data = Lec7g, na.action = na.exclude)
model4 <- lm(qakeyboa ~ keypad + sms + keypad:sms , data = Lec7g, na.action = na.exclude)
anova(model0,model1)
anova(model0,model2)
anova(model3,model4)
summary(model4)
anova(model4)
Lec7g$simple <- interaction(Lec7g$keypad, Lec7g$sms) #merge two factors into one factor with 4 levels
levels(Lec7g$simple) #to see the level in the new factor
contractSimple <-c(1,-1,0,0) #looking only at the condition phone sms function had Simple implementation, comparing keypad  Repeat-Key and Modified Modal implementation
contractComplex <-c(0,0,1,-1) #looking only at the condition phone sms function had Complex implementation, comparing keypad  Repeat-Key and Modified Modal implementation
SimpleEff <- cbind(contractSimple,contractComplex)
contrasts(Lec7g$simple) <- SimpleEff #now we link the two contrasts with the factor simple
simpleEffectModel <-lm(qakeyboa ~ simple , data = Lec7g, na.action = na.exclude)
summary.lm(simpleEffectModel)
WebVisit$simple <- interaction(WebVisit$version, WebVisit$portal)
levels(WebVisit$simple)
unsink()
sink()
levels(WebVisit$simple)
simpleEffectModel <-lm(pages ~ simple , data = WebVisit, na.action = na.exclude)
summary.lm(simpleEffectModel)
levels(WebVisit$simple)
Lec7g$simple <- interaction(Lec7g$keypad, Lec7g$sms) #merge two factors into one factor with 4 levels
levels(Lec7g$simple) #to see the level in the new factor
contractSimple <-c(1,-1,0,0) #looking only at the condition phone sms function had Simple implementation, comparing keypad  Repeat-Key and Modified Modal implementation
contractSimple
contractComplex <-c(0,0,1,-1) #looking only at the condition phone sms function had Complex implementation, comparing keypad  Repeat-Key and Modified Modal implementation
SimpleEff <- cbind(contractSimple,contractComplex)
SimpleEff
contrasts(Lec7g$simple) <- SimpleEff #now we link the two contrasts with the factor simple
Lec7g$simple
Lec7g$simple <- interaction(Lec7g$keypad, Lec7g$sms) #merge two factors into one factor with 4 levels
Lec7g$simple
summary.lm(simpleEffectModel)
anova(simpleEffectModel)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
dir <- dirname(parent.frame(2)$ofile)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
install.packages("rstudioapi", dependencies = TRUE)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
WebVisit <- read.csv(file="./webvisit0.csv", header=TRUE, sep=",")
# set working directory to match this file's directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#
# Data file used in the script
#   exam marks2004-2007_equal_year_sample.sav
#   examples_Chi.sav
#   feedback experiment.sav
#   mobile phone (interacting with computers).sav
#   MobilePhone and Skin Design Survey.sav
#   mp3playersurvey.sav
#
################################
library(foreign)
library(car) #Package includes Levene's test
library(tidyr)  # for wide to long format transformation of the data
library(ggplot2)
library(QuantPsyc) #include lm.beta()
library(gmodels)
library(rstudioapi)
install.packages("tidyr", dependencies = TRUE)
library(tidyr)  # for wide to long format transformation of the data
View(SimpleEff)
##################### comparing with constant ####################
Lec7c <- read.spss("mp3playersurvey.sav", use.value.labels=TRUE, to.data.frame=TRUE)
View(Lec7c)
View(Lec7c)
mean(Lec7c$FileAvg)
View(Lec7c)
sd(Lec7c$FileAvg)
model0 <- lm(I(FileAvg - 5.29) ~ 1, data = Lec7c,na.action = na.exclude)
summary(model0)
### analyses of normality of the sample and the residuals
hist(Lec7c$FileAvg) # so this data is not normal distibuted!
shapiro.test(Lec7c$FileAvg)
hist(resid(model0))
shapiro.test(resid(model0))
resid(model0)
View(Lec7c)
t.test(Lec7c$FileAvg, mu=5.29)
################ Comparing two groups ###############
Lec7d <- read.spss("feedback experiment.sav", use.value.labels=TRUE, to.data.frame=TRUE)
View(Lec7d)
lec7dsub <- subset(Lec7d, (Feedback != "V"))  # filter out the video feedback condition from the data
model0<- lm(Post_score ~ 1, data = lec7dsub)            #model without predictor
model1 <- lm(Post_score ~ Feedback, data = lec7dsub)    #model with predictor
View(lec7dsub)
hist(lec7dsub$Post_score)
anova(model0,model1, test = "F")                        #compare if model1 provide better fitt than model0
summary(model1)
View(lec7dsub)
View(lec7dsub)
View(lec7dsub)
anova(model1) #print results in anova format
### examine assumptions
hist(Lec7d$Post_score)
shapiro.test(Lec7d$Post_score)
hist(resid(model1))
shapiro.test(resid(model1))
aggregate(lec7dsub$Post_score~lec7dsub$Feedback, FUN=mean) # mean Postcode for each type of Feedback
aggregate(lec7dsub$Post_score~lec7dsub$Feedback, FUN=sd)
leveneTest(lec7dsub$Post_score, lec7dsub$Feedback, center = median)
## alternative way to compare two independent groups
t.test(Post_score ~ Feedback, data = lec7dsub, paired = FALSE, var.equal = TRUE, na.action = na.exclude)
############### Paired-Sample comparison ######################
Lec7e <- read.spss("feedback experiment.sav", use.value.labels=TRUE, to.data.frame=TRUE)
View(Lec7e)
subject <- c(1:91) # add participants numbers
Lec7e <-cbind(Lec7e,subject)
View(Lec7e)
Lec7e$subject <-factor(Lec7e$subject)
View(Lec7e)
#data is wide format (i.e. pre and post score seperate varaibles) need to be transformed into longformat (i.e measurement in single variable)
Lec7e_long <-  gather(Lec7e, condition, measurement, Pre_score, Post_score)
View(Lec7e_long)
Lec7e_long$condition <- factor(Lec7e_long$condition)
m <- aov(measurement ~ condition + Error(subject/condition), data =Lec7e_long ) # Error term let r know that "condition within subject", i.e. condition is nested within subjects
summary(m)
coefficients(m)
### 3 alternative ways of comparing two paired variables
# alternative 1
Lec7e$delta_score <-Lec7e$Post_score-Lec7e$Pre_score
m1 <- lm(delta_score ~ 1, data = Lec7e)
summary(m1)
# alternative 2
t.test(Lec7e$Pre_score, Lec7e$Post_score, paired = TRUE)
# alternative 3
library(ez)
################## Comparing multiple levels (One-way ANOVA) ###########
Lec7f <- read.spss("exam marks2004-2007_equal_year_sample.sav", use.value.labels=TRUE, to.data.frame=TRUE)
################## Comparing multiple levels (One-way ANOVA) ###########
Lec7f <- read.spss("exam marks2004-2007_equal_year_sample.sav", use.value.labels=TRUE, to.data.frame=TRUE)
View(Lec7f)
Lec7f$yearF <- factor(Lec7f$year, levels = c(2004:2007), labels = c(2004:2007)) # in this example year is considered an nominal factor
View(Lec7f)
model0 <- lm(t_term1 ~ 1, data = Lec7f, na.action = na.exclude)
model1 <- lm(t_term1 ~ yearF, data = Lec7f, na.action = na.exclude)
anova(model0,model1)
summary(model1)
fitted(model1)
hist(fitted(model1))
hist(model1)
model1
View(model1)
View(model)
View(m)
View(model1)
View(model2)
View(model3)
View(model4)
View(model0)
View(model1)
anova(model0,model1)
# set working directory to match this file's directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load the webvisit file (2 + 25 + 24 mod 3 = 0)
WebVisit <- read.csv(file="./webvisit0.csv", header=TRUE, sep=",")
# model
model <- lm(pages ~ version + portal + version:portal , data = WebVisit, na.action = na.exclude)
# model
model0 <- lm(pages ~ 1, data = WebVisit, na.action = na.exclude)
model1 <- lm(pages ~ version + portal + version:portal , data = WebVisit, na.action = na.exclude)
anova(model0, model1)
model1 <- lm(pages ~ version*portal , data = WebVisit, na.action = na.exclude)
anova(model0, model1)
plot(pages ~ version, WebVisit, pch = 19, col = 'gray50',
main = "MODEL VARIATION")
plot(pages ~ 1, WebVisit, pch = 19, col = 'gray50',
main = "MODEL VARIATION")
plot(pages ~ portal, WebVisit, pch = 19, col = 'gray50',
main = "MODEL VARIATION")
plot(pages ~ version*portal, WebVisit, pch = 19, col = 'gray50',
main = "MODEL VARIATION")
plot(pages ~ version*portal, WebVisit, pch = 19, col = 'gray50',
main = "MODEL VARIATION")
plot(pages ~ version*portal, WebVisit, pch = 19, col = 'gray50',
main = "MODEL VARIATION")
plot(pages ~ version + portal, WebVisit, pch = 19, col = 'gray50',
main = "MODEL VARIATION")
anova(model0, model1)
Lec7g$simple <- interaction(Lec7g$keypad, Lec7g$sms) #merge two factors into one factor with 4 levels
levels(Lec7g$simple) #to see the level in the new factor
View(Lec7g)
contractSimple <-c(1,-1,0,0) #looking only at the condition phone sms function had Simple implementation, comparing keypad  Repeat-Key and Modified Modal implementation
contractComplex <-c(0,0,1,-1) #looking only at the condition phone sms function had Complex implementation, comparing keypad  Repeat-Key and Modified Modal implementation
SimpleEff <- cbind(contractSimple,contractComplex)
SimpleEff
contrasts(Lec7g$simple) <- SimpleEff #now we link the two contrasts with the factor simple
bar <- ggplot(Lec7g, aes(sms , qakeyboa, fill = keypad))
bar + stat_summary(fun.y = mean, geom = "bar", position="dodge")
View(Lec7g)
view(lec7g$simple)
View(lec7g$simple)
View(Lec7g$simple)
simpleEffectModel <-lm(qakeyboa ~ simple , data = Lec7g, na.action = na.exclude)
plot(qakeyboa ~ simple, Lec7g, pch = 19, col = 'gray50',
)
plot(qakeyboa ~ simple, Lec7g, pch = 19, col = 'gray50',main = "MODEL VARIATION")
contrasts(Lec7g$simple)
SimpleEff
# model
model0 <- lm(pages ~ 1, data = WebVisit, na.action = na.exclude)
model1 <- lm(pages ~ version, data = WebVisit, na.action = na.exclude)
model2 <- lm(pages ~ portal, data = WebVisit, na.action = na.exclude)
model3 <- lm(pages ~ version + portal, data = WebVisit, na.action = na.exclude)
model4 <- lm(pages ~ version + portal + version:portal, data = WebVisit, na.action = na.exclude)
anova(model0, model1)
anova(model0, model2)
anova(model3, model4)
contractSimple <-c(1,-1,0,0) #looking only at the condition phone sms function had Simple implementation, comparing keypad  Repeat-Key and Modified Modal implementation
contractComplex <-c(0,0,1,-1) #looking only at the condition phone sms function had Complex implementation, comparing keypad  Repeat-Key and Modified Modal implementation
SimpleEff <- cbind(contractSimple,contractComplex)
contrasts(Lec7g$simple) <- SimpleEff #now we link the two contrasts with the factor simple
simpleEffectModel <-lm(qakeyboa ~ simple , data = Lec7g, na.action = na.exclude)
summary.lm(simpleEffectModel)
anova(simpleEffectModel)
anova(model0, model1)
anova(model0, model2)
anova(model3, model4)
anova(model4)
anova(model)
# model
model4 <- lm(pages ~ version + portal + version:portal, data = WebVisit, na.action = na.exclude)
# model
model <- lm(pages ~ version + portal + version:portal, data = WebVisit, na.action = na.exclude)
anova(model)
# TODO
WebVisit$simple <- interaction(WebVisit$version, WebVisit$portal)
levels(WebVisit$simple)
contractZero <-c(1,-1,0,0) #looking only at portal type 0, comparing version 0 and 1
contractOne <-c(0,0,1,-1) #looking only at portal type 1, comparing version 0 and 1
SimpleEff <- cbind(contractZero,contractOne)
contrasts(WebVisit$simple) <- SimpleEff #now we link the two contrasts with the factor simple
simpleEffectModel <-lm(pages ~ simple , data = WebVisit, na.action = na.exclude)
summary.lm(simpleEffectModel)
contrasts(WebVisit$simple)
SimpleEff
contrasts(WebVisit$version:WebVisit$portal)
plot(pages ~ version:portal, WebVisit, pch = 19, col = 'gray50',main = "MODEL VARIATION")
# do the simple effect analysis
WebVisit$simple <- interaction(WebVisit$version, WebVisit$portal)
levels(WebVisit$simple)
simpleEffectModel <-lm(pages ~ simple , data = WebVisit, na.action = na.exclude)
summary.lm(simpleEffectModel)
# plot the page visits in a histogram
hist(WebVisit$pages)
WebVisit[WebVisit[, "version"] == 1,]
hist(WebVisit[WebVisit[, "version"] == 1,]$pages)
hist(WebVisit[WebVisit[, "version"] == 1,]$pages)
hist(WebVisit[WebVisit[, "version"] == 1,]$pages, main="TEST")
hist(WebVisit[WebVisit[, "version"] == 1,]$pages, main="Version == 1")
hist(WebVisit[WebVisit[, "version"] == 0,]$pages, main="Version == 0")
# plot the page visits in a histogram
hist(WebVisit[WebVisit[, "version"] == 0,]$pages, main="Version == 0")
hist(WebVisit[WebVisit[, "version"] == 1,]$pages, main="Version == 1")
hist(WebVisit[WebVisit[, "portal"] == 0,]$pages, main="Portal == 0")
hist(WebVisit[WebVisit[, "portal"] == 1,]$pages, main="Portal == 1")
hist(WebVisit[WebVisit[, "portal"] == 0,]$pages, main="Portal == 0")
