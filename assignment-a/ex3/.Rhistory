1 + 2
license()
demo()
image()
image
image.default()
image.default
table(train)
train
train <- merge(train_labels, train_values)
table(train)
# Define train_values_url
train_values_url <- "http://s3.amazonaws.com/drivendata/data/7/public/4910797b-ee55-40a7-8668-10efd5c1b960.csv"
# Import train_values
train_values <- read.csv(train_values_url)
# Define train_labels_url
train_labels_url <- "http://s3.amazonaws.com/drivendata/data/7/public/0bf8bc6e-30d0-4c50-956a-603fc693d966.csv"
# Import train_labels
train_labels <- read.csv(train_labels_url)
# Define test_values_url
test_values_url <- "http://s3.amazonaws.com/drivendata/data/7/public/702ddfc5-68cd-4d1d-a0de-f5f566f76d91.csv"
# Import test_values
test_values <- read.csv(test_values_url)
train <- merge(train_labels, train_values)
table(train)
View(train)
(rstudioapi)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d <- read.csv("data.csv")
boxplot(score~metric,data=d, main="Score per metric", xlab="Metric", ylab="Score")
d$score[d$metric == 'ap']
std(d$score[d$metric == 'ap'])
sd(d$score[d$metric == 'ap'])
s <- sd(d$score[d$metric == 'ap'])
ap <- d$score[d$metric == 'ap'] / s
s <- sd(d$score[d$metric == 'err'])
err <- d$score[d$metric == 'err'] / s
s <- sd(d$score[d$metric == 'ndcg'])
ndcg <- d$score[d$metric == 'ndcg'] / s
boxplot(ap,err,ndcg)
m <- mean(d$score[d$metric == 'err'])
errm <- d$score[d$metric == 'err'] - m
err <- err - m
m <- mean(d$score[d$metric == 'ndcg'])
ndcg <- ndcg - m
boxplot(err,ndcg)
mean(ndcg)
m
m <- mean(d$score[d$metric == 'ndcg'])
ndcg <- d$score[d$metric == 'ndcg'] - m
m <- mean(d$score[d$metric == 'err'])
err <- d$score[d$metric == 'err'] - m
boxplot(err,ndcg)
s <- sd(ndcg)
ndcg <- ndcg / s
s <- sd(err)
err <- err / s
boxplot(err,ndcg)
sd(err)
sd(ndcg)
err2 <- d$score[d$metric == 'err']
err2 <- (err2 - min(err2)) / (max(err2) - min(err2))
boxplot(err2)
boxplot.stats(err2)$out
boxplot.stats(err2)
boxplot.stats()
err3 <- d$score[d$metric == 'err']
boxplot.stats(err3)
boxplot(err3)
boxplot(score~metric,data=d, main="Score per metric", xlab="Metric", ylab="Score")
ap3 <- d$score[d$metric == 'ap']
boxplot(ap3)
boxplot.stats(ap3)
sort(err3)
boxplot(err3)
boxplot(score~metric,data=d, main="Score per metric", xlab="Metric", ylab="Score")
d2 <- 2
d2$score[d2$metric == 'ap'] = (d2$score[d2$metric == 'ap'] - min(d2$score[d2$metric == 'ap'])) / (max(d2$score[d2$metric == 'ap']) - min(d2$score[d2$metric == 'ap']))
d2$score[d2$metric == 'ap'] = (d2$score[d2$metric == 'ap'] - min(d2$score[d2$metric == 'ap'])) / (max(d2$score[d2$metric == 'ap']) - min(d2$score[d2$metric == 'ap']))
d2 <- d
d2$score[d2$metric == 'ap'] = (d2$score[d2$metric == 'ap'] - min(d2$score[d2$metric == 'ap'])) / (max(d2$score[d2$metric == 'ap']) - min(d2$score[d2$metric == 'ap']))
d2$score[d2$metric == 'err'] = (d2$score[d2$metric == 'err'] - min(d2$score[d2$metric == 'err'])) / (max(d2$score[d2$metric == 'err']) - min(d2$score[d2$metric == 'err']))
d2$score[d2$metric == 'err'] = (d2$score[d2$metric == 'err'] - min(d2$score[d2$metric == 'err'])) / (max(d2$score[d2$metric == 'err']) - min(d2$score[d2$metric == 'ndcg']))
d2$score[d2$metric == 'err'] = (d2$score[d2$metric == 'err'] - min(d2$score[d2$metric == 'err'])) / (max(d2$score[d2$metric == 'err']) - min(d2$score[d2$metric == 'err']))
d2$score[d2$metric == 'ndcg'] = (d2$score[d2$metric == 'ndcg'] - min(d2$score[d2$metric == 'ndcg'])) / (max(d2$score[d2$metric == 'ndcg']) - min(d2$score[d2$metric == 'ndcg']))
d2$score[d2$metric == 'p10'] = (d2$score[d2$metric == 'p10'] - min(d2$score[d2$metric == 'p10'])) / (max(d2$score[d2$metric == 'p10']) - min(d2$score[d2$metric == 'p10']))
d2$score[d2$metric == 'rbp'] = (d2$score[d2$metric == 'rbp'] - min(d2$score[d2$metric == 'rbp'])) / (max(d2$score[d2$metric == 'rbp']) - min(d2$score[d2$metric == 'rbp']))
boxplot(score~metric,data=d2, main="Score per metric", xlab="Metric", ylab="Score")
boxplot(score~metric,data=d, main="Score per metric", xlab="Metric", ylab="Score")
boxplot(score~metric,data=d2, main="Score per metric", xlab="Metric", ylab="Score")
d2$score[d2$metric == 'ap'][!d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out]
boxplot(score~metric,data=d2, main="Score per metric", xlab="Metric", ylab="Score")
boxplot(score~metric,data=d2, main="Score per metric", xlab="Metric", ylab="Score")
ap <- d2$score[d2$metric == 'ap']
ap[!ap %in% boxplot.stats(ap)$out]
d2$score[d2$metric == 'ap'] <- ap
boxplot(score~metric,data=d2, main="Score per metric", xlab="Metric", ylab="Score")
d2$score[d2$metric == 'ap'] = d2$score[d2$metric == 'ap'][!d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out]
ap
apout <- ap[!ap %in% boxplot.stats(ap)$out]
d3 <- d2[!d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out]
d3 <- subset(d2, !d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out)
!d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out
boxplot(score~metric,data=d3, main="Score per metric", xlab="Metric", ylab="Score")
boxplot.stats(d2$score[d2$metric == 'ap'])$out
!d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out
size(boxplot.stats(d2$score[d2$metric == 'ap'])$out)
length(boxplot.stats(d2$score[d2$metric == 'ap'])$out)
d2$score[d2$score=='ap']
d2$score[d2$metric=='ap']
d2[d2$metric=='ap']
d2$metric=='ap'
d2$metric=='err'
d2$metric=='ap'
d2$metric=='err'
d2$metric=='ap'
boxplot.stats(d2$score[d2$metric == 'ap'])$out
d2$score == 'ap' & (!d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out)
(d2$score == 'ap' & (!d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out)) == TRUE
length(d2$score == 'ap' & (!d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out))
d3 <- subset(d2, d2$score == 'ap' & (!d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out))
boxplot(score~metric,data=d3, main="Score per metric", xlab="Metric", ylab="Score")
d2$score == 'ap' & (!d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out)
d2$score != 'ap' | (!d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out)
d3 <- subset(d3, d2$score != 'ap' | (!d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out))
(!d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out)
a <- subset(d2, (!d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out))
length(a)
a <- subset(d2, (!d2$score %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out))
length(a)
(!d2$score %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out)
length(d2$score == 'ap' & (!d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out))
length((!d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out))
length((d2$score[d2$metric == 'ap'] %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out))
length(boxplot.stats(d2$score[d2$metric == 'ap'])$out)
boxplot(score~metric,data=d2, main="Score per metric", xlab="Metric", ylab="Score")
boxplot(score~metric,data=d3, main="Score per metric", xlab="Metric", ylab="Score")
boxplot(score~metric,data=a, main="Score per metric", xlab="Metric", ylab="Score")
d3 <- subset(d2, (d2$metric != 'ap' | !d2$score %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out))
# remove outliers from the ap metric
d2 <- subset(d, (d$metric != 'ap' | !d$score %in% boxplot.stats(d$score[d$metric == 'ap'])$out))
d2$score[d2$metric == 'ap'] = standardize(d2$score[d2$metric == 'ap'])
library.packages('robustHD', dependencies=T)
install.packages('robustHD', dependencies=T)
# remove outliers from the ap metric
d2 <- subset(d, (d$metric != 'ap' | !d$score %in% boxplot.stats(d$score[d$metric == 'ap'])$out))
d2$score[d2$metric == 'ap'] = (d2$score[d2$metric == 'ap'] - mean(d2$score[d2$metric == 'ap'])) / sd(d2$score[d2$metric == 'ap'])
d2$score[d2$metric == 'err'] = (d2$score[d2$metric == 'err'] - mean(d2$score[d2$metric == 'err'])) / sd(d2$score[d2$metric == 'err'])
d2$score[d2$metric == 'ndcg'] = (d2$score[d2$metric == 'ndcg'] - mean(d2$score[d2$metric == 'ndcg'])) / sd(d2$score[d2$metric == 'ndcg'])
d2$score[d2$metric == 'p10'] = (d2$score[d2$metric == 'p10'] - mean(d2$score[d2$metric == 'p10'])) / sd(d2$score[d2$metric == 'p10'])
d2$score[d2$metric == 'rbp'] = (d2$score[d2$metric == 'rbp'] - mean(d2$score[d2$metric == 'rbp'])) / sd(d2$score[d2$metric == 'rbp'])
boxplot(score~metric,data=d2, main="Score per metric", xlab="Metric", ylab="Score")
# remove outliers from the ap metric
d2 <- subset(d, (d$metric != 'ap' | !d$score %in% boxplot.stats(d$score[d$metric == 'ap'])$out))
d3 <- subset(d2, (d2$metric != 'ap' | !d2$score %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out))
d2 <- d
d3 <- subset(d2, (d2$metric != 'ap' | !d2$score %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out))
d3 <- subset(d2, (d2$metric != 'ap' | !d2$score %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out))
length(!d2$score %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out)()
length(!d2$score %in% boxplot.stats(d2$score[d2$metric == 'ap'])$out)
length(boxplot.stats(d2$score[d2$metric == 'ap'])$out)
d2 <- d
length(boxplot.stats(d2$score[d2$metric == 'ap'])$out)
# remove outliers from the ap metric
d2 <- subset(d, (d$metric != 'ap' | !d$score %in% boxplot.stats(d$score[d$metric == 'ap'])$out))
d2$score[d2$metric == 'ap'] = (d2$score[d2$metric == 'ap'] - mean(d2$score[d2$metric == 'ap'])) / sd(d2$score[d2$metric == 'ap'])
d2$score[d2$metric == 'err'] = (d2$score[d2$metric == 'err'] - mean(d2$score[d2$metric == 'err'])) / sd(d2$score[d2$metric == 'err'])
d2$score[d2$metric == 'ndcg'] = (d2$score[d2$metric == 'ndcg'] - mean(d2$score[d2$metric == 'ndcg'])) / sd(d2$score[d2$metric == 'ndcg'])
d2$score[d2$metric == 'p10'] = (d2$score[d2$metric == 'p10'] - mean(d2$score[d2$metric == 'p10'])) / sd(d2$score[d2$metric == 'p10'])
d2$score[d2$metric == 'rbp'] = (d2$score[d2$metric == 'rbp'] - mean(d2$score[d2$metric == 'rbp'])) / sd(d2$score[d2$metric == 'rbp'])
boxplot(score~metric,data=d2, main="Score per metric", xlab="Metric", ylab="Score")
model0 <- lm(score ~ 1, data = d2, na.action = na.exclude)
model1 <- lm(score ~ dataset, data = d2, na.action = na.exclude)
anova(model0, model1)
model2 <- lm(score ~ topic, data = d2, na.action = na.exclude)
anova(model0, model2)
summary(model2)
d3 <- subset(d2, d2$dataset == 'trec09' | d2$dataset == 'trec10')
model0 <- lm(score ~ 1, data = d3, na.action = na.exclude)
model1 <- lm(score ~ dataset, data = d3, na.action = na.exclude)
anova(model0, model1)
summary(model1)
d3 <- subset(d2, d2$dataset == 'trec07' | d2$dataset == 'trec08')
model1 <- lm(score ~ dataset, data = d3, na.action = na.exclude)
summary(model1)
boxplot(score~dataset,data=d3, main="Score per dataset", xlab="Dataset", ylab="Score")
d3 <- subset(d, d2$dataset == 'trec07' | d2$dataset == 'trec08')
model1 <- lm(score ~ dataset, data = d3, na.action = na.exclude)
summary(model1)
d3 <- subset(d, d$dataset == 'trec07' | d$dataset == 'trec08')
model1 <- lm(score ~ dataset, data = d3, na.action = na.exclude)
summary(model1)
anova(model1)
summary(model1)
anova(model1)model1 <- lm(score ~ dataset, data = d2, na.action = na.exclude)
model1 <- lm(score ~ dataset, data = d2, na.action = na.exclude)
summary(model1)
model1 <- lm(score ~ dataset, data = d, na.action = na.exclude)
summary(model1)
model1 <- lm(score ~ topic, data = d, na.action = na.exclude)
summary(model1)
model0 <- lm(score ~ 1, data = d2, na.action = na.exclude)
model1 <- lm(score ~ dataset, data = d2, na.action = na.exclude)
anova(model0, model1)
anova(model1)
summary(model1)
leveneTest(d2$score, d2$dataset, center = median)
library(car)
leveneTest(d2$score, d2$dataset, center = median)
leveneTest(d2$score[d2$metric == 'ap'], d2$score[d2$metric == 'err'], center = median)
leveneTest(d2$score, d2$metric, center = median)
leveneTest(d$score, d$metric, center = median)
model1 <- lm(score ~ dataset, data = d2, na.action = na.exclude)
summary(model1)
anova(model1)
model2 <- lm(score ~ topic, data = d2, na.action = na.exclude)
model2 <- lm(score ~ topic, data = d2, na.action = na.exclude)
# leveneTest(d$score, d$metric, center = median)
anova(model2)
# leveneTest(d$score, d$metric, center = median)
summary(model2)
levels(d2$topic)
d2$topic <- factor(d2$topic, levels = c(351:550), labels = c(351:550))
levels(d2$topic)
model2 <- lm(score ~ topic, data = d2, na.action = na.exclude)
# leveneTest(d$score, d$metric, center = median)
summary(model2)
boxplot(score~topic,data=d2, main="Score per topic", xlab="Topic", ylab="Score")
aggregate(d$score~topic, FUN=sd)
aggregate(d$score~d$topic, FUN=sd)
x <- aggregate(d$score~d$topic, FUN=sd)
sort(x$`d$score`)
sort(x$`d$score`, index.return=TRUE)
s <- sort(x$`d$score`, index.return=TRUE)
s$ix[0:10]
s$x[s$ix[0:10]]
x$`d$score`[s$ix[0:10]]
x$`d$topic`[s$ix[0:10]]
top_topics <- x$`d$topic`[s$ix[0:10]]
boxplot(score~topic,data=subset(d2, d2$topic %in% top_topcis), main="Score per topic", xlab="Topic", ylab="Score")
boxplot(score~topic,data=subset(d2, d2$topic %in% top_topics), main="Score per topic", xlab="Topic", ylab="Score")
# use rstudioapi package to get file directory
library(rstudioapi)
# set working directory to match this file's directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load the webvisit file (2 + 25 + 24 mod 3 = 0)
WebVisit <- read.csv(file="./webvisit0.csv", header=TRUE, sep=",")
# plot the page visits in a histogram
hist(WebVisit[WebVisit[, "version"] == 0,]$pages, main="Version == 0")
hist(WebVisit[WebVisit[, "version"] == 1,]$pages, main="Version == 1")
hist(WebVisit[WebVisit[, "portal"] == 0,]$pages, main="Portal == 0")
hist(WebVisit[WebVisit[, "portal"] == 1,]$pages, main="Portal == 1")
# shapiro-wilk test for normal distribution
shapiro.test(WebVisit$pages)
# model analysis
model <- lm(pages ~ version + portal + version:portal, data = WebVisit, na.action = na.exclude)
anova(model)
modelg <- glm(pages ~ version + portal + version:portal, data = WebVisit, family=poisson(), na.action = na.exclude)
anova(modelg)
anova(modelg,test="Chisq")
# model analysis
model <- glm(pages ~ version + portal + version:portal, data = WebVisit, family=poisson(), na.action = na.exclude)
anova(model,test="Chisq")
# do the simple effect analysis
WebVisit$simple <- interaction(WebVisit$version, WebVisit$portal)
simpleEffectModel <-glm(pages ~ simple , data = WebVisit, family=poisson(), na.action = na.exclude)
summary.glm(simpleEffectModel)
library(car)
library(ggplot2)
library(nlme)
library(reshape)
library(graphics)
library(QuantPsyc) #include lm.beta()
# use rstudioapi package to get file directory
library(rstudioapi)
# set working directory to match this file's directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
q3 <- read.csv("hybrid_reg.csv",header = TRUE)
#subquestion 2 - histogram of dependent variable
hist(q3$msrp)
#subquestion 3 - scatterplots of dependent and predictor variables
scatterplot(msrp ~ mpg, data = q3)
scatterplot(msrp ~ mpgmpge, data = q3)
scatterplot(msrp ~ accelrate, data = q3)
#subquestion 4 - linear regression
model <-lm(msrp ~ + mpg + mpgmpge + accelrate , data = q3, na.action = na.exclude )
summary(model)
confint(model) #gives CI95% of the estimates (B-values)
lm.beta(model) #give standardized Beta values
#testing independence of error
durbinWatsonTest(model)
#test of multicollinearity
vif(model)
1/vif(model) # Tolerance
library(car)
library(ggplot2)
library(nlme)
library(reshape)
library(graphics)
# use rstudioapi package to get file directory
library(rstudioapi)
# set working directory to match this file's directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
p3 <- read.csv("set1.csv",header = TRUE)
model0 <- lm(score ~ 1, data = d2, na.action = na.exclude)
model1 <- lm(score ~ dataset, data = d2, na.action = na.exclude)
d2$topic <- factor(d2$topic, levels = c(351:550), labels = c(351:550))
model2 <- lm(score ~ topic, data = d2, na.action = na.exclude)
# leveneTest(d$score, d$metric, center = median)
anova(model2)
d3 <- subset(d2, d2$dataset == 'trec10')
aggregate(d3$score ~ d3$token + d3$lug + d3$model, FUN=mean
aggregate(d3$score ~ d3$token + d3$lug + d3$model, FUN=mean)
aggregate(d3$score ~ d3$token + d3$lug + d3$model, FUN=mean)
d3 <- subset(d2, d2$dataset == 'trec10')
systems <- aggregate(d3$score ~ d3$token + d3$lug + d3$model, FUN=mean)
s <- sort(systems, index.return=TRUE)
s <- sort(systems$`d3$score`, index.return=TRUE)
top3 <- systems[s$ix[0:3]]
systems
top3 <- systems[s$ix[0:3]]$token
top3 <- s$ix[0:3]
systems[309]
systems[top3,]
s <- sort(systems$`d3$score`, index.return=TRUE)
top3 <- systems[s$ix[0:3],]
top3
s <- sort(systems$`d3$score`, index.return=TRUE, decreasing = TRUE)
top3 <- systems[s$ix[0:3],]
top3
topics_sds <- aggregate(d3$score ~ d3$topic, FUN=sd)
topics_sds
sort(topics_sds,index.return=TRUE)
sort(topics_sds$`d3$score`, index.return=TRUE)
s <- sort(topics_sds$`d3$score`, index.return=TRUE)
top15topics <- topics_sds$`d3$topic`[s$ix[0:15]]
top15topics
d4 <- subset(d3, d3$topic %in% top15topics)
systems <- aggregate(d4$score ~ d4$token + d4$lug + d4$model, FUN=mean)
s <- sort(systems$`d4$score`, index.return=TRUE, decreasing = TRUE)
top3 <- systems[s$ix[0:3],]
top3
######## Component analysis
hist(d3$score)
######## Component analysis
model0 <- lm(score ~ 1, data = d3, na.action = na.exclude)
model1 <- lm(score ~ lug, data = d3, na.action = na.exclude)
model2 <- lm(score ~ token, data = d3, na.action = na.exclude)
model3 <- lm(score ~ model, data = d3, na.action = na.exclude)
anova(model1)
anova(model2)
anova(model3)
model1 <- lm(score ~ lug + token + model, data = d3, na.action = na.exclude)
anova(model1)
model1 <- lm(score ~ lug + token + model, data = d2, na.action = na.exclude)
anova(model1)
model2 <- lm(score ~ token, data = d3, na.action = na.exclude)
model3 <- lm(score ~ model, data = d3, na.action = na.exclude)
model1 <- lm(score ~ lug + token + model, data = d2, na.action = na.exclude)
anova(model1)
# pick top 3 systems
systems <- aggregate(d3$score ~ d3$token + d3$lug + d3$model, FUN=mean)
s <- sort(systems$`d3$score`, index.return=TRUE, decreasing = TRUE)
top3 <- systems[s$ix[0:3],]
top3
